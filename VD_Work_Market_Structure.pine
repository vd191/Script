//@version=5
indicator("VD Works - Market Structure and Forecasting", overlay = true, max_lines_count = 500, max_labels_count = 500)
//---------------------------------------------------------------------------------------------------------------------}
// Ichimoku: Trend dectection - Break of Structure and Change of character
// IDM and Sweep: To consume available liquidity - The large counter trend orders which are placed 
// Engulfing: Confirm the trend going to continue after the large orders are gone.
//---------------------------------------------------------------------------------------------------------------------{

//---------------------------------------------------------------------------------------------------------------------}
// Input Settings
//---------------------------------------------------------------------------------------------------------------------{
// Defining common colour variables
commonMidNight = color.new(#0a0913, 0)

commonGreen = color.new(#089981, 0)  
commonRed = color.new(#ff5252, 0)    
commonBlue = color.new(#3179f5, 0) 

commonLightGreen = color.rgb(67, 160, 71, 90)
commonLightRed = color.rgb(244, 67, 54, 90)
commonLightBlue = color.new(#3179f5, 90)

commonMoreGreen = color.new(#089981, 50)  
commonMoreRed = color.new(#ff5252, 50)    
commonMoreBlue = color.new(#3179f5, 50)  

commonGrey = color.gray
commonWhite = color.white

// Ichimoku colour variables
bullCss = commonGreen
bearCss = commonRed

greenCss = commonGreen
redCss = commonRed
blueCss = commonBlue

lightBlueCss = commonLightBlue
lightRedCss = commonLightRed
lightGreenCss = commonLightGreen

moreBlueCss = commonMoreBlue
moreRedCss = commonMoreRed
moreGreenCss = commonLightGreen

conversionLineCss = commonGreen
baseLineCss = commonMidNight
laggingCss = commonRed
leadingSpanACss = commonGreen
leadingSpanBCss = commonRed
upperCloudCss = commonLightGreen
lowwerCloudCss = commonLightRed
highCss = commonMoreGreen
lowCss = commonMoreRed
sweepsCss = commonGrey
textColor = commonGrey
greyCss = commonGrey
whiteCss = commonWhite

// Tooltops
var ttBearishEngulfing = "Bearish Engulfing\n"
var ttBullishEngulfing = "Bullish Engulfing\n"

// Ichimoku default input values
showIchimoku = input(true, "Show Ichimoku", group = 'Ichimoku')
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length", group = 'Ichimoku')
basePeriods = input.int(26, minval=1, title="Base Line Length", group = 'Ichimoku')
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length", group = 'Ichimoku')
displacement = input.int(26, minval=1, title="Lagging Span", group = 'Ichimoku')

// MACD Forcasting
showMacdForecast = input(true, "Show MACD Forecast", group = 'MACD Forecast')
fast = input.int(12, 'Fast Length', minval = 2, group = 'MACD Forecast')
slow = input.int(26, 'Slow Length', minval = 2, group = 'MACD Forecast')
sigLen = input.int(9, 'Signal Length', minval = 2, group = 'MACD Forecast')
trend = input.string('MACD - Signal', 'Trend Determination', options = ['MACD', 'MACD - Signal'], group = 'MACD Forecast')
maxMemory = input.int(50, 'Maximum Memory', minval = 2, group = 'MACD Forecast')
fcast = input.int(100, 'Forecasting Length', minval = 1, group = 'MACD Forecast')
upPer = input(80, 'Top Percentile', group = 'MACD Forecast')
midPer = input(50, 'Average Percentage', group = 'MACD Forecast')
dnPer = input(20, 'Bottom Percentile', group = 'MACD Forecast')
signalArea = input(true, 'Signal Area', inline = 'signal', group = 'MACD Forecast')

// IDM and Sweep default input values 
showChoch = input(false, "Show CHoCH", group = 'Liquidity Sweep')
showBos = input(false, "Show BOS", group = 'Liquidity Sweep')
showIdm = input(true, "Show Inducements", inline = 'idm', group = 'Liquidity Sweep')
showSweeps = input(true, "Show Sweeps", inline = 'sweeps', group = 'Liquidity Sweep')
showCircles = input(true, "Show Swings", group = 'Liquidity Sweep')
len = input.int(50, minval=1, title = 'CHoCH Detection Period', group = 'Liquidity Sweep')
shortLen = input.int(3, minval=1, title = 'IDM Detection Period', group = 'Liquidity Sweep')

// Engufling
showEnguflingBg = input(false, "Show Engufling Background", group = 'Engufling')
showEnguflingLabel = input(false, "Show Engufling Label", group = 'Engufling')
var trendRule1 = "SMA50"
var trendRule2 = "SMA50, SMA200"
var trendRule3 = "Ichimoku Baseline"
var trendRule4 = "Ichimoku Cloud"
var trendRule = input.string(trendRule1, "Engufling Detect Trend Based On", options=["No detection", trendRule4, trendRule3, trendRule1, trendRule2], group = 'Engufling')

// Show Reversal Pattern
showReversalPattern = input(false, "Show Reversal Pattern", group = 'Reversal Pattern')

// Show Continuation Pattern
showContinuationPattern = input(false, "Show Continuation Pattern", group = 'Continuation Pattern')


//---------------------------------------------------------------------------------------------------------------------}
// Ichimoku
//---------------------------------------------------------------------------------------------------------------------{

donchian(length) => math.avg(ta.lowest(length), ta.highest(length))

conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

cloudBearish =  leadLine1 < leadLine2
cloudBullish = leadLine1 > leadLine2

plot(showIchimoku ? conversionLine : na, color=conversionLineCss, title="Conversion Line", display = display.none)
plot(showIchimoku ? baseLine: na, color=baseLineCss, title="Base Line", linewidth = 2)
plot(close, offset = -displacement + 1, color=laggingCss, title="Lagging Span", display = display.none)

p1 = plot(showIchimoku ? leadLine1 : na, offset = displacement - 1, color=leadingSpanACss, title="Leading Span A" , display = display.none)
p2 = plot(showIchimoku ? leadLine2 : na, offset = displacement - 1, color=leadingSpanBCss, title="Leading Span B", display = display.none)

fill(p1, p2, color = leadLine1 > leadLine2 ? upperCloudCss : lowwerCloudCss, title= "Kumo Cloud")


//---------------------------------------------------------------------------------------------------------------------}
// MACD Forecasting
//---------------------------------------------------------------------------------------------------------------------{
// Default style colours
upLine = blueCss
dnLine = redCss

upArea = lightBlueCss
dnArea = lightRedCss

signalBull = moreGreenCss
signalBear = moreRedCss

// Types
type vector
    array<float> id

type holder
    array<vector> id

// Methods
barIdx = bar_index

method populate(holder get_holder, idx, init_price)=>
    if get_holder.id.size() < idx+1
        get_holder.id.push(vector.new(array.new<float>(0)))

    get_holder.id.get(idx).id.unshift(close - init_price)
    
    //Remove last element if array size is greater than specified limit
    if get_holder.id.get(idx).id.size() > maxMemory
        get_holder.id.get(idx).id.pop()

method forecast(holder get_holder, idx, init_price, upper_coords, mid_coords, lower_coords)=>
    max_horizon = get_holder.id.size()

    x = 0
    for i = idx-1 to math.min(idx+fcast, max_horizon-1)
        get_vector = get_holder.id.get(i)
        
        //Compute forecasts
        upper = init_price + get_vector.id.percentile_linear_interpolation(upPer)
        mid   = init_price + get_vector.id.percentile_linear_interpolation(midPer)
        lower = init_price + get_vector.id.percentile_linear_interpolation(dnPer)

        //Append coordinates
        upper_coords.push(chart.point.from_index(barIdx+x, upper))
        mid_coords.push(chart.point.from_index(barIdx+x, mid))
        lower_coords.unshift(chart.point.from_index(barIdx+x, lower))
        x += 1

//Calculations
var memory = map.new<int, holder>()
var up_idx = 0
var dn_idx = 0
var uptrend_init_price = close
var downtrend_init_price = close

//Compute MACD
[macd, signal, _] = ta.macd(close, fast, slow, sigLen)

//Populate map
if barstate.isfirst
    memory.put(1, holder.new(array.new<vector>(0)))
    memory.put(0, holder.new(array.new<vector>(0)))

trigger = switch trend
    'MACD' => ta.cross(macd, 0)
    => ta.cross(macd, signal)

uptrend = trend == 'MACD' ? macd > 0 : macd > signal
downtrend = trend == 'MACD' ? macd < 0 : macd < signal

//Reference prices
uptrend_init_price := uptrend and not uptrend[1] ? close : uptrend_init_price
downtrend_init_price := downtrend and not downtrend[1] ? close : downtrend_init_price
init_value = uptrend ? uptrend_init_price : downtrend_init_price

//Uptrend
if uptrend
    get_holder = memory.get(1)
    get_holder.populate(up_idx, uptrend_init_price)

//Downtrend
if downtrend
    get_holder = memory.get(0)
    get_holder.populate(dn_idx, downtrend_init_price)

//Indices
up_idx := not uptrend ? 0 : up_idx + 1
dn_idx := not downtrend ? 0 : dn_idx + 1

if trigger
    upper_coords = array.new<chart.point>(0)
    mid_coords = array.new<chart.point>(0)
    lower_coords = array.new<chart.point>(0)

    if uptrend
        get_holder = memory.get(1)
        get_holder.forecast(up_idx, uptrend_init_price, upper_coords, mid_coords, lower_coords)
    else
        get_holder = memory.get(0)
        get_holder.forecast(dn_idx, downtrend_init_price, upper_coords, mid_coords, lower_coords)
    
    polyline.delete(polyline.new(showMacdForecast ? mid_coords : na, line_color = uptrend ? upLine : dnLine)[1])

    //Area
    polyline.delete(polyline.new(showMacdForecast ? array.concat(upper_coords, lower_coords) : na
      , line_color = na
      , fill_color = uptrend ? upArea : dnArea)
      [1])

// Plots
init_plot = plot(showMacdForecast ? init_value : na, "Reference Price", init_value != init_value[1] ? na : color.gray)
price_plot = plot(showMacdForecast ? close : na, editable = false, display = display.none)

top_css = not signalArea ? na : uptrend ? signalBull : color.new(chart.bg_color, 100)
btm_css = not signalArea ? na : uptrend ? color.new(chart.bg_color, 100) : signalBear

//Price to Reference Area
topValue = showMacdForecast ? math.max(close, uptrend ? uptrend_init_price : downtrend_init_price) : na
bottomValue = showMacdForecast ? math.min(close, uptrend ? uptrend_init_price : downtrend_init_price) : na
fill(init_plot, price_plot, top_value = topValue, bottom_value = bottomValue, top_color = top_css, bottom_color = btm_css)


//---------------------------------------------------------------------------------------------------------------------}
// liquidity Sweep
//---------------------------------------------------------------------------------------------------------------------{

//Functions
//Swings detection/measurements
n = bar_index

swings(len)=>
    var os = 0
    var int topx = na
    var int btmx = na
    
    upper = ta.highest(len)
    lower = ta.lowest(len)

    os := high[len] > upper ? 0 : low[len] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[len] : na
    topx := os == 0 and os[1] != 0 ? n[len] : topx

    btm = os == 1 and os[1] != 1 ? low[len] : na
    btmx := os == 1 and os[1] != 1 ? n[len] : btmx

    [top, topx, btm, btmx]


//Swings
[top, topx, btm, btmx] = swings(len)
[stop, stopx, sbtm, sbtmx] = swings(shortLen)

var os = 0
var top_crossed = false
var btm_crossed = false

var float max = na
var float min = na

var int max_x1 = na
var int min_x1 = na

var float topy = na
var float btmy = na
var stop_crossed = false
var sbtm_crossed = false    


//CHoCH Detection
if top
    topy := top
    top_crossed := false
if btm
    btmy := btm
    btm_crossed := false

//Test for CHoCH
if close > topy and not top_crossed
    os := 1
    top_crossed := true
if close < btmy and not btm_crossed
    os := 0
    btm_crossed := true

//Display CHoCH
if os != os[1]
    max := high
    min := low
    max_x1 := n
    min_x1 := n
    stop_crossed := false
    sbtm_crossed := false

    if os == 1 and showChoch
        line.new(topx, topy, n, topy, color = bullCss, style = line.style_dashed)
        label.new(int(math.avg(n, topx)), topy, 'CHoCH', color = color(na), style = label.style_label_down, textcolor = bullCss, size = size.tiny)
    else if showChoch
        line.new(btmx, btmy, n, btmy, color = bearCss, style = line.style_dashed)
        label.new(int(math.avg(n, btmx)), btmy, 'CHoCH', color = color(na), style = label.style_label_up, textcolor = bearCss, size = size.tiny)

stopy = fixnan(stop)
sbtmy = fixnan(sbtm)


//IDM
idmLow = low < sbtmy and not sbtm_crossed and os == 1 and sbtmy != btmy
idmHigh = high > stopy and not stop_crossed and os == 0 and stopy != topy

if idmLow
    if showIdm
        line.new(sbtmx, sbtmy, n, sbtmy, color = color.gray, style = line.style_dotted)
        label.new(int(math.avg(n, sbtmx)), sbtmy, 'IDM', color = color(na), style = label.style_label_up, textcolor = color.gray, size = size.tiny)    
    sbtm_crossed := true

if idmHigh
    if showIdm
        line.new(stopx, stopy, n, stopy, color = color.gray, style = line.style_dotted)
        label.new(int(math.avg(n, stopx)), stopy, 'IDM', color = color(na), style = label.style_label_down, textcolor = color.gray, size = size.tiny)
    stop_crossed := true


//BOS
if close > max and sbtm_crossed and os == 1
    if showBos
        line.new(max_x1, max, n, max, color = bullCss)
        label.new(int(math.avg(n, max_x1)), max, 'BOS', color = color(na), style = label.style_label_down, textcolor = bullCss, size = size.tiny)
    
    sbtm_crossed := false


if close < min and stop_crossed and os == 0
    if showBos
        line.new(min_x1, min, n, min, color = bearCss)
        label.new(int(math.avg(n, min_x1)), min, 'BOS', color = color(na), style = label.style_label_up, textcolor = bearCss, size = size.tiny)
    
    stop_crossed := false


//Sweeps
sweepHigh = high > max and close < max and os == 1 and n - max_x1 > 1 and showSweeps
sweepLow = low < min and close > min and os == 0 and n - min_x1 > 1 and showSweeps

if sweepHigh
    line.new(max_x1, max, n, max, color = sweepsCss, style = line.style_dotted)
    label.new(int(math.avg(n, max_x1)), max, 'x', color = color(na), style = label.style_label_down, textcolor = sweepsCss)

if sweepLow
    line.new(min_x1, min, n, min, color = sweepsCss, style = line.style_dotted)
    label.new(int(math.avg(n, min_x1)), min, 'x', color = color(na), style = label.style_label_up, textcolor = sweepsCss)

//Trailing max/min
max := math.max(high, max)
min := math.min(low, min)

if max > max[1]
    max_x1 := n
if min < min[1]
    min_x1 := n


// High and low
var ext_choch = line.new(na,na,na,na, style = line.style_dashed)
var ext_bos   = line.new(na,na,na,na)
var ext_idm   = line.new(na,na,na,na, style = line.style_dotted, color = commonGrey)

var ext_choch_lbl = label.new(na,na, 'CHoCH', color = color(na), size = size.tiny)
var ext_bos_lbl   = label.new(na,na, 'BOS'  , color = color(na), size = size.tiny)
var ext_idm_lbl   = label.new(na,na, 'IDM'  , color = color(na), size = size.tiny, textcolor = commonGrey)

if barstate.islast
    if os == 1
        if showChoch
            ext_choch.set_xy1(btmx, btmy), ext_choch.set_xy2(n, btmy), ext_choch.set_color(greyCss)    
            ext_choch_lbl.set_xy(n, btmy), ext_choch_lbl.set_style(label.style_label_up), ext_choch_lbl.set_textcolor(greyCss)
        
        if showBos    
            ext_bos.set_xy1(max_x1, max), ext_bos.set_xy2(n, max), ext_bos.set_color(greyCss)    
            ext_bos_lbl.set_xy(n, max), ext_bos_lbl.set_style(label.style_label_down), ext_bos_lbl.set_textcolor(greyCss)
            
        if not sbtm_crossed and showIdm
            ext_idm.set_xy1(sbtmx, sbtmy), ext_idm.set_xy2(n+15, sbtmy)   
            ext_idm_lbl.set_xy(n+15, sbtmy), ext_idm_lbl.set_style(label.style_label_up)
            ext_idm.set_color(commonGrey), ext_idm_lbl.set_textcolor(commonGrey)
        else
            ext_idm.set_color(na)
            ext_idm_lbl.set_textcolor(na)
    else
        if showChoch
            ext_choch.set_xy1(topx, topy), ext_choch.set_xy2(n, topy), ext_choch.set_color(greyCss)    
            ext_choch_lbl.set_xy(n, topy), ext_choch_lbl.set_style(label.style_label_down), ext_choch_lbl.set_textcolor(greyCss)
        if showBos
            ext_bos.set_xy1(min_x1, min), ext_bos.set_xy2(n, min), ext_bos.set_color(greyCss)    
            ext_bos_lbl.set_xy(n, min), ext_bos_lbl.set_style(label.style_label_up), ext_bos_lbl.set_textcolor(greyCss)

        if not stop_crossed and showIdm
            ext_idm.set_xy1(stopx, stopy), ext_idm.set_xy2(n+15, stopy)   
            ext_idm_lbl.set_xy(n+15, stopy), ext_idm_lbl.set_style(label.style_label_down)
            ext_idm.set_color(commonGrey), ext_idm_lbl.set_textcolor(commonGrey)
        else
            ext_idm.set_color(na)
            ext_idm_lbl.set_textcolor(na)

plot(showCircles ? top : na, 'Swing High', highCss, 5, plot.style_circles, offset = -len)
plot(showCircles ? btm : na, 'Swing Low', lowCss, 5, plot.style_circles, offset = -len)


//---------------------------------------------------------------------------------------------------------------------}
// Engulfing
//---------------------------------------------------------------------------------------------------------------------{
C_DownTrend = true
C_UpTrend = true

if trendRule == trendRule4
    C_DownTrend := close < leadLine1 and close < leadLine2 and leadLine1 < leadLine2
	C_UpTrend := close > leadLine1 and close > leadLine2 and leadLine1 > leadLine2 

if trendRule == trendRule3
    C_UpTrend := close > baseLine
	C_DownTrend := close < baseLine

if trendRule == trendRule1
	priceAvg = ta.sma(close, 50)
	C_UpTrend := close > priceAvg
	C_DownTrend := close < priceAvg

if trendRule == trendRule2
	sma200 = ta.sma(close, 200)
	sma50 = ta.sma(close, 50)
	C_UpTrend := close > sma50 and sma50 > sma200
	C_DownTrend := close < sma50 and sma50 < sma200

C_Len = 14 // ta.ema depth for bodyAvg
C_ShadowPercent = 5.0 // size of shadows
C_ShadowEqualsPercent = 100.0
C_DojiBodyPercent = 5.0
C_Factor = 2.0 // shows the number of times the shadow dominates the candlestick body

C_BodyHi = math.max(close, open)
C_BodyLo = math.min(close, open)
C_Body = C_BodyHi - C_BodyLo
C_BodyAvg = ta.ema(C_Body, C_Len)
C_SmallBody = C_Body < C_BodyAvg
C_LongBody = C_Body > C_BodyAvg
C_UpShadow = high - C_BodyHi
C_DnShadow = C_BodyLo - low
C_HasUpShadow = C_UpShadow > C_ShadowPercent / 100 * C_Body
C_HasDnShadow = C_DnShadow > C_ShadowPercent / 100 * C_Body
C_WhiteBody = open < close
C_BlackBody = open > close
C_Range = high-low
C_IsInsideBar = C_BodyHi[1] > C_BodyHi and C_BodyLo[1] < C_BodyLo
C_BodyMiddle = C_Body / 2 + C_BodyLo
C_ShadowEquals = C_UpShadow == C_DnShadow or (math.abs(C_UpShadow - C_DnShadow) / C_DnShadow * 100) < C_ShadowEqualsPercent and (math.abs(C_DnShadow - C_UpShadow) / C_UpShadow * 100) < C_ShadowEqualsPercent
C_IsDojiBody = C_Range > 0 and C_Body <= C_Range * C_DojiBodyPercent / 100
C_Doji = C_IsDojiBody and C_ShadowEquals

patternLabelPosLow = low - (ta.atr(30) * 0.6)
patternLabelPosHigh = high + (ta.atr(30) * 0.6)

// Engulfing Bearish
C_EngulfingBearishNumberOfCandles = 2
C_EngulfingBearish = C_DownTrend and C_BlackBody and C_LongBody and C_WhiteBody[1] and C_SmallBody[1] and close <= open[1] and open >= close[1] and ( close < open[1] or open > close[1] )

if C_EngulfingBearish and showEnguflingLabel

    label.new(bar_index, showEnguflingLabel ? patternLabelPosHigh : na, text="BE", style=label.style_label_down, color = lightRedCss, textcolor=textColor, tooltip = ttBearishEngulfing)

engulfingBearishBg = showEnguflingBg ? ta.highest(C_EngulfingBearish?1:0, C_EngulfingBearishNumberOfCandles)!=0 : na
bgcolor( engulfingBearishBg ? lightRedCss : na, offset=-(C_EngulfingBearishNumberOfCandles-1), title="Engulfing Bearish Background")

// Engulfing Bullish
C_EngulfingBullishNumberOfCandles = 2
C_EngulfingBullish = C_UpTrend and C_WhiteBody and C_LongBody and C_BlackBody[1] and C_SmallBody[1] and close >= open[1] and open <= close[1] and ( close > open[1] or open < close[1] )

if C_EngulfingBullish and showEnguflingLabel
    label.new(bar_index, showEnguflingLabel ? patternLabelPosLow : na, text="BE", style=label.style_label_up, color = lightBlueCss, textcolor=textColor, tooltip = ttBullishEngulfing)

engulfingBullishBg = showEnguflingBg ? ta.highest(C_EngulfingBullish?1:0, C_EngulfingBullishNumberOfCandles)!=0 : na
bgcolor(engulfingBullishBg ? lightBlueCss : na, offset=-(C_EngulfingBullishNumberOfCandles-1), title="Engulfing Bullish Background")


//---------------------------------------------------------------------------------------------------------------------}
// Alert triggers 
//---------------------------------------------------------------------------------------------------------------------{
// Trigger an alert condition
// Common alerts
alertcondition(sweepHigh or sweepLow, title="Sweep Alert", message="A sweep signal was detected.")
alertcondition(C_EngulfingBearish, title = "Bearish Engulfing", message = "New Engulfing - Bearish pattern detected")
alertcondition(C_EngulfingBullish, title = "Bullish Engulfing", message = "New Engulfing - Bullish pattern detected")
alertcondition(C_EngulfingBullish or C_EngulfingBearish, title = "Engulfing", message = "New Engulfing - Pattern detected")

//---------------------------------------------------------------------------------------------------------------------}
// Strategy alerts
//---------------------------------------------------------------------------------------------------------------------{

// Detect all the engulfing candles
EngulfingBullish = C_WhiteBody and C_LongBody and C_BlackBody[1] and C_SmallBody[1] and close >= open[1] and open <= close[1] and ( close > open[1] or open < close[1] )
EngulfingBearish = C_BlackBody and C_LongBody and C_WhiteBody[1] and C_SmallBody[1] and close <= open[1] and open >= close[1] and ( close < open[1] or open > close[1] )

// Reversal Potential Pattern - After having a sweep liquidity and a strong candle
previousSweepHigh = sweepHigh[1]
previousSweepLow = sweepLow[1]
nextCandleLower = close < close[1]
nextCandleHiger = close > close[1]
strongBearishCandle = EngulfingBearish or nextCandleLower
strongBullishCandle = EngulfingBullish or nextCandleHiger
bearishReversalSignal = previousSweepHigh and strongBearishCandle
bullishReversalSignal = previousSweepLow and strongBullishCandle

plotshape(series= showReversalPattern ? bearishReversalSignal : na, location=location.abovebar, color=bearCss, style=shape.labeldown, title="Bearish Reversal Pattern", text="Reversal", textcolor=whiteCss)
plotshape(series= showReversalPattern ? bullishReversalSignal : na, location=location.belowbar, color=bullCss, style=shape.labelup, title="Bullish Reversal Pattern", text="Reversal", textcolor=whiteCss)
alertcondition(bearishReversalSignal or bullishReversalSignal, title="Reversal Potential Pattern", message="Reversal Potential Pattern was detected.")

// Continuation Potential Pattern - After having a trend and a strong candle
downTrend = close < leadLine1 and close < leadLine2 and leadLine1 < leadLine2
upTrend = close > leadLine1 and close > leadLine2 and leadLine1 > leadLine2 
bearishContinuationSignal = downTrend and EngulfingBearish
bullishContinuationSignal = upTrend and EngulfingBullish

plotshape(series= showContinuationPattern ? bearishContinuationSignal : na, location=location.abovebar, color=lowCss, style=shape.labeldown, title="Bearish Continuation Pattern", text="BC", textcolor=whiteCss)
plotshape(series= showContinuationPattern ? bullishContinuationSignal : na, location=location.belowbar, color=highCss, style=shape.labelup, title="Bullish Continuation Pattern", text="BC", textcolor=whiteCss)
alertcondition(bearishContinuationSignal or bullishContinuationSignal, title="Continuation Pattern", message="Continuation Pattern was detected.")

// All in one condition
allConditions = bearishContinuationSignal or bullishContinuationSignal or bearishReversalSignal or bullishReversalSignal,
alertcondition(allConditions, title="Patterns", message="A Pattern was detected.")