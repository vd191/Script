//@version=5
indicator("VD Works - Market Structure", overlay = true, max_lines_count = 500, max_labels_count = 500)
//---------------------------------------------------------------------------------------------------------------------}
//Settings
//---------------------------------------------------------------------------------------------------------------------{
len = input(50, 'CHoCH Detection Period')
shortLen = input(3, 'IDM Detection Period')

//Styling
bullCss = input(#089981, 'Bullish Elements', group = 'Style')
bearCss = input(#ff5252, 'Bearish Elements', group = 'Style')

showChoch = input(true, "Show CHoCH", group = 'Style')
showBos = input(true, "Show BOS", group = 'Style')

showIdm = input(true, "Show Inducements", inline = 'idm', group = 'Style')
idmCss = input(color.gray, "", inline = 'idm', group = 'Style')

showSweeps = input(true, "Show Sweeps", inline = 'sweeps', group = 'Style')
sweepsCss = input(color.gray, "", inline = 'sweeps', group = 'Style')

showCircles = input(true, "Show Swings", group = 'Style')

//---------------------------------------------------------------------------------------------------------------------}
//Functions
//---------------------------------------------------------------------------------------------------------------------{
//Swings detection/measurements
n = bar_index

swings(len)=>
    var os = 0
    var int topx = na
    var int btmx = na
    
    upper = ta.highest(len)
    lower = ta.lowest(len)

    os := high[len] > upper ? 0 : low[len] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[len] : na
    topx := os == 0 and os[1] != 0 ? n[len] : topx

    btm = os == 1 and os[1] != 1 ? low[len] : na
    btmx := os == 1 and os[1] != 1 ? n[len] : btmx

    [top, topx, btm, btmx]

//---------------------------------------------------------------------------------------------------------------------}
//Swings
//---------------------------------------------------------------------------------------------------------------------{
[top, topx, btm, btmx] = swings(len)
[stop, stopx, sbtm, sbtmx] = swings(shortLen)

var os = 0
var top_crossed = false
var btm_crossed = false

var float max = na
var float min = na

var int max_x1 = na
var int min_x1 = na

var float topy = na
var float btmy = na
var stop_crossed = false
var sbtm_crossed = false    

//---------------------------------------------------------------------------------------------------------------------}
//CHoCH Detection
//---------------------------------------------------------------------------------------------------------------------{
if top
    topy := top
    top_crossed := false
if btm
    btmy := btm
    btm_crossed := false

//Test for CHoCH
if close > topy and not top_crossed
    os := 1
    top_crossed := true
if close < btmy and not btm_crossed
    os := 0
    btm_crossed := true

//Display CHoCH
if os != os[1]
    max := high
    min := low
    max_x1 := n
    min_x1 := n
    stop_crossed := false
    sbtm_crossed := false

    if os == 1 and showChoch
        line.new(topx, topy, n, topy, color = bullCss, style = line.style_dashed)
        label.new(int(math.avg(n, topx)), topy, 'CHoCH', color = color(na), style = label.style_label_down, textcolor = bullCss, size = size.tiny)
    else if showChoch
        line.new(btmx, btmy, n, btmy, color = bearCss, style = line.style_dashed)
        label.new(int(math.avg(n, btmx)), btmy, 'CHoCH', color = color(na), style = label.style_label_up, textcolor = bearCss, size = size.tiny)

stopy = fixnan(stop)
sbtmy = fixnan(sbtm)

//---------------------------------------------------------------------------------------------------------------------}
//Bullish BOS
//---------------------------------------------------------------------------------------------------------------------{
//IDM
if low < sbtmy and not sbtm_crossed and os == 1 and sbtmy != btmy
    if showIdm
        line.new(sbtmx, sbtmy, n, sbtmy, color = color.gray, style = line.style_dotted)
        label.new(int(math.avg(n, sbtmx)), sbtmy, 'IDM', color = color(na), style = label.style_label_up, textcolor = color.gray, size = size.tiny)
    
    sbtm_crossed := true

//BOS
if close > max and sbtm_crossed and os == 1
    if showBos
        line.new(max_x1, max, n, max, color = bullCss)
        label.new(int(math.avg(n, max_x1)), max, 'BOS', color = color(na), style = label.style_label_down, textcolor = bullCss, size = size.tiny)
    
    sbtm_crossed := false

//---------------------------------------------------------------------------------------------------------------------}
//Bearish BOS
//---------------------------------------------------------------------------------------------------------------------{
//IDM
if high > stopy and not stop_crossed and os == 0 and stopy != topy
    if showIdm
        line.new(stopx, stopy, n, stopy, color = color.gray, style = line.style_dotted)
        label.new(int(math.avg(n, stopx)), stopy, 'IDM', color = color(na), style = label.style_label_down, textcolor = color.gray, size = size.tiny)
    
    stop_crossed := true

//BOS
if close < min and stop_crossed and os == 0
    if showBos
        line.new(min_x1, min, n, min, color = bearCss)
        label.new(int(math.avg(n, min_x1)), min, 'BOS', color = color(na), style = label.style_label_up, textcolor = bearCss, size = size.tiny)
    
    stop_crossed := false

//---------------------------------------------------------------------------------------------------------------------}
//Sweeps
//---------------------------------------------------------------------------------------------------------------------{
if high > max and close < max and os == 1 and n - max_x1 > 1 and showSweeps
    line.new(max_x1, max, n, max, color = color.gray, style = line.style_dotted)
    label.new(int(math.avg(n, max_x1)), max, 'x', color = color(na), style = label.style_label_down, textcolor = color.gray)

if low < min and close > min and os == 0 and n - min_x1 > 1 and showSweeps
    line.new(min_x1, min, n, min, color = color.gray, style = line.style_dotted)
    label.new(int(math.avg(n, min_x1)), min, 'x', color = color(na), style = label.style_label_up, textcolor = color.gray)

//Trailing max/min
max := math.max(high, max)
min := math.min(low, min)

if max > max[1]
    max_x1 := n
if min < min[1]
    min_x1 := n

//---------------------------------------------------------------------------------------------------------------------}
//Extensions
//---------------------------------------------------------------------------------------------------------------------{
var ext_choch = line.new(na,na,na,na, style = line.style_dashed)
var ext_bos   = line.new(na,na,na,na)
var ext_idm   = line.new(na,na,na,na, style = line.style_dotted, color = idmCss)

var ext_choch_lbl = label.new(na,na, 'CHoCH', color = color(na), size = size.tiny)
var ext_bos_lbl   = label.new(na,na, 'BOS'  , color = color(na), size = size.tiny)
var ext_idm_lbl   = label.new(na,na, 'IDM'  , color = color(na), size = size.tiny, textcolor = idmCss)

if barstate.islast
    if os == 1
        ext_choch.set_xy1(btmx, btmy), ext_choch.set_xy2(n, btmy), ext_choch.set_color(bearCss)    
        ext_choch_lbl.set_xy(n, btmy), ext_choch_lbl.set_style(label.style_label_up), ext_choch_lbl.set_textcolor(bearCss)
        
        ext_bos.set_xy1(max_x1, max), ext_bos.set_xy2(n, max), ext_bos.set_color(bullCss)    
        ext_bos_lbl.set_xy(n, max), ext_bos_lbl.set_style(label.style_label_down), ext_bos_lbl.set_textcolor(bullCss)
        
        if not sbtm_crossed
            ext_idm.set_xy1(sbtmx, sbtmy), ext_idm.set_xy2(n+15, sbtmy)   
            ext_idm_lbl.set_xy(n+15, sbtmy), ext_idm_lbl.set_style(label.style_label_up)
            ext_idm.set_color(idmCss), ext_idm_lbl.set_textcolor(idmCss)
        else
            ext_idm.set_color(na)
            ext_idm_lbl.set_textcolor(na)
    else
        ext_choch.set_xy1(topx, topy), ext_choch.set_xy2(n, topy), ext_choch.set_color(bullCss)    
        ext_choch_lbl.set_xy(n, topy), ext_choch_lbl.set_style(label.style_label_down), ext_choch_lbl.set_textcolor(bullCss)
        
        ext_bos.set_xy1(min_x1, min), ext_bos.set_xy2(n, min), ext_bos.set_color(bearCss)    
        ext_bos_lbl.set_xy(n, min), ext_bos_lbl.set_style(label.style_label_up), ext_bos_lbl.set_textcolor(bearCss)

        if not stop_crossed
            ext_idm.set_xy1(stopx, stopy), ext_idm.set_xy2(n+15, stopy)   
            ext_idm_lbl.set_xy(n+15, stopy), ext_idm_lbl.set_style(label.style_label_down)
            ext_idm.set_color(idmCss), ext_idm_lbl.set_textcolor(idmCss)
        else
            ext_idm.set_color(na)
            ext_idm_lbl.set_textcolor(na)

//---------------------------------------------------------------------------------------------------------------------}
//Plots
//---------------------------------------------------------------------------------------------------------------------{
plot(showCircles ? top : na, 'Swing High', color.new(bearCss, 50), 5, plot.style_circles, offset = -len)
plot(showCircles ? btm : na, 'Swing Low', color.new(bullCss, 50), 5, plot.style_circles, offset = -len)

//---------------------------------------------------------------------------------------------------------------------}


// ----------- // Support and Resistance Multi Timeframe--------------------------
//------------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------{

srGR   = 'Support & Resistance Settings'
srTT   = 'tip : in ranging markets higher timeframe resolution or higher detection length might help reduce the noise'
srTF   = input.string('Chart', 'Detection Timeframe', options=['Chart', '15 Minutes', '1 Hour', '4 Hours', '1 Day', '1 Week'], group = srGR, tooltip = srTT)
srLN   = input(15, 'Detection Length', group = srGR)

srMR   = input.float(2, 'Support Resistance Margin', minval = .1, maxval = 10, step = .1, group = srGR)

srSLC  = input(color.new(#089981, 53), '- Support, Lines', inline = 'srS', group = srGR)
srSZC  = input(color.new(#089981, 83), 'Zones', inline = 'srS', group = srGR)
srRLC  = input(color.new(#f23645, 53), '- Resistance, Lines', inline = 'srR', group = srGR)
srRZC  = input(color.new(#f23645, 83), 'Zones', inline = 'srR', group = srGR)

srHST  = input.bool(true, 'Check Previous Historical S&R Zone', group = srGR)

mnGR   = 'Manupulations' 
mnSH   = input.bool(true, 'Manupulation Zones', group = mnGR)
mnMR   = input.float(1.3, 'Manupulation Margin', minval = .1, maxval = 10, step = .1, group = mnGR)
mnSZC  = input(color.new(#2962ff, 73), 'Manupulation Zones, Support', inline = 'LQ', group = mnGR)
mnRZC  = input(color.new(#ff9800, 73), 'Resistance', inline = 'LQ', group = mnGR)

sigGR  = 'Signals'
srFBT  = 'Filters the breakouts that failed to continue beyond a level'
srFBO  = input.bool(true, 'Avoid False Breakouts', group = sigGR, tooltip = srFBT)

srBUC  = input(color.new(#089981, 33), 'Breakouts, Bullish', inline = 'srB', group = sigGR)
srBDC  = input(color.new(#f23645, 33), 'Bearish', inline = 'srB', group = sigGR)
srBS   = input.string('Tiny', "", options=['Auto', 'Tiny', 'Small', 'Normal', 'None'], inline = 'srB', group = sigGR)

srTUC  = input(color.new(#2962ff, 33), 'Tests, Bullish', inline = 'srT', group = sigGR)
srTDC  = input(color.new(#e040fb, 33), 'Bearish', inline = 'srT', group = sigGR)
srTS   = input.string('Tiny', "", options=['Auto', 'Tiny', 'Small', 'Normal', 'None'], inline = 'srT', group = sigGR)

srRUC  = input(color.new(#089981, 33), 'Retests, Bullish', inline = 'srR', group = sigGR)
srRDC  = input(color.new(#f23645, 33), 'Bearish', inline = 'srR', group = sigGR)
srRS   = input.string('Tiny', "", options=['Auto', 'Tiny', 'Small', 'Normal', 'None'], inline = 'srR', group = sigGR)

srPUC  = input(color.new(#089981, 33), 'Rejections, Bullish', inline = 'srP', group = sigGR)
srPDC  = input(color.new(#f23645, 33), 'Bearish', inline = 'srP', group = sigGR)
srPS   = input.string('Tiny', "", options=['Auto', 'Tiny', 'Small', 'Normal', 'None'], inline = 'srP', group = sigGR)

othGR  = 'Others'
swSH   = input.string('None', "Swing Levels", options=['Auto', 'Small', 'Normal', 'Large', 'None'], inline = 'sw', group = othGR)
swHC   = input(color.new(#f23645, 33), 'H', inline = 'sw', group = othGR)
swLC   = input(color.new(#089981, 33), 'L', inline = 'sw', group = othGR)

//-----------------------------------------------------------------------------}
// User Defined Types
//-----------------------------------------------------------------------------{

// @type        bar properties with their values 
//
// @field o     (float) open price of the bar
// @field h     (float) high price of the bar
// @field l     (float) low price of the bar
// @field c     (float) close price of the bar
// @field v     (float) volume of the bar
// @field i     (int) index of the bar

type bar
    float o = open
    float h = high
    float l = low
    float c = close
    float v = volume
    int   i = bar_index

// @type        store pivot high/low and index data 
//
// @field x     (int)    last pivot bar index
// @field x1    (int)    previous pivot bar index
// @field h     (float)  last pivot high
// @field h1    (float)  previous pivot high
// @field l     (float)  last pivot low
// @field l1    (float)  previous pivot low
// @field hx    (bool)   pivot high cross status
// @field lx    (bool)   pivot low cross status

type pivotPoint
    int    x
    int    x1
    float  h
    float  h1
    float  l
    float  l1
    bool   hx
    bool   lx

// @type        stores support and resistance visuals and signal status 
//
// @field bx    (box)   support and resistance zones
// @field lq    (box)   liquidity sweeps
// @field ln    (line)  support and resistance levels
// @field b     (bool)  breakout status
// @field b     (bool)  test status
// @field b     (bool)  retest status
// @field b     (bool)  liqudation status
// @field m     (float) default margin 

type SnR
    box    bx
    box    lq
    line   ln
    bool   b
    bool   t
    bool   r
    bool   l
    float  m

//-----------------------------------------------------------------------------}
// Variables
//-----------------------------------------------------------------------------{

bar b = bar.new()

var pivotPoint pp  = pivotPoint.new()

var SnR[] R = array.new<SnR> (1, SnR.new(box(na), box(na), line(na), false, false, false, false, na))  
var SnR[] S = array.new<SnR> (1, SnR.new(box(na), box(na), line(na), false, false, false, false, na)) 

var SnR lR  = SnR.new(box(na), box(na), line(na), false, false, false, false, na)
var SnR lS  = SnR.new(box(na), box(na), line(na), false, false, false, false, na)
var SnR lRt = SnR.new(box(na), box(na), line(na), false, false, false, false, na)
var SnR lSt = SnR.new(box(na), box(na), line(na), false, false, false, false, na)

var int mss = 0

//-----------------------------------------------------------------------------}
// General Calculations
//-----------------------------------------------------------------------------{

int tf_m = switch srTF
    "Chart"      => timeframe.isintraday ? timeframe.multiplier : timeframe.isdaily ? 1440 : timeframe.isweekly ? 10080 : 10080 * 30
    "15 Minutes" => 15
    "1 Hour"     => 60
    "4 Hours"    => 240
    "1 Day"      => 1440
    "1 Week"     => 10080

ch_m  = if timeframe.isintraday
    timeframe.multiplier
else if timeframe.isdaily
    1440
else if timeframe.isweekly
    10080
else if timeframe.ismonthly
    10080 * 30

srLN := srLN * tf_m / ch_m

pHST = ta.highest(b.h, srLN)
pLST = ta.lowest (b.l, srLN)

atr   = ta.atr(17)
isLLS = math.abs(b.l - math.min(b.o, b.c)) >= 1.618 * atr
isLUS = math.abs(b.h - math.max(b.o, b.c)) >= 1.618 * atr

vSMA  = ta.sma(nz(b.v), 17)
isHV  = nz(b.v) >= 1.618 * vSMA
isLV  = nz(b.v) <= 0.618 * vSMA
vST   = isHV ? '\n *High Trading Activity' : isLV ? '\n *Low Trading Activity' : '\n *Average Trading Activity'

if nz(b.v) > vSMA * 4.669
    alert('High trading activity (Volume SPIKE) detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

srBUC := srBS != 'None' ? srBUC : color(na)
srBDC := srBS != 'None' ? srBDC : color(na)
srBTC  = srBS != 'None' ? color.white : color(na)

srTUC := srTS != 'None' ? srTUC : color(na)
srTDC := srTS != 'None' ? srTDC : color(na)
srTTC  = srTS != 'None' ? color.white : color(na)

srRUC := srRS != 'None' ? srRUC : color(na)
srRDC := srRS != 'None' ? srRDC : color(na)
srRTC  = srRS != 'None' ? color.white : color(na)

//-----------------------------------------------------------------------------}
// Functions/Methods
//-----------------------------------------------------------------------------{

// @function        calcuates cumulative volume of the given range
//                     
// @param _l        (int)  length of the range
// @param _o        (int)  offset 
//
// @returns         (float) cumulative volume

f_getTradedVolume(_l, _o) =>
    v = 0.
    for x = 0 to _l - 1
        v += volume[_o + x]
    v

// @function        converts size strings to enumerated values
//                     
// @param _l        (string) size string
//
// @returns         (enumeration) size enumerated value

f_getSize(_s) =>
    switch _s
        'Tiny'   => size.tiny
        'Small'  => size.small
        'Normal' => size.normal
        'Large'  => size.large
        'Huge'   => size.huge
        => size.auto

//-----------------------------------------------------------------------------}
// Calculations
//-----------------------------------------------------------------------------{

pp_h  = ta.pivothigh(srLN, srLN)

if not na(pp_h)
    pp.h1  := pp.h 
    pp.h   := pp_h
    pp.x1  := pp.x
    pp.x   := b.i[srLN]
    pp.hx  := false

    if R.size() > 1
        lR  := R.get(0)
        lRt := R.get(1)

        if pp.h < lR.bx.get_bottom() * (1 - lR.m * .17 * srMR) or pp.h > lR.bx.get_top() * (1 + lR.m * .17 * srMR) 
            if pp.x < lR.bx.get_left() and pp.x + srLN > lR.bx.get_left() and b.c < lR.bx.get_bottom()
                na
            else
                if pp.h < lRt.bx.get_bottom() * (1 - lRt.m * .17 * srMR) or pp.h > lRt.bx.get_top() * (1 + lRt.m * .17 * srMR)

                    R.unshift(
                      SnR.new(
                         box.new(pp.x, pp.h, b.i, pp.h * (1 - ((pHST - pLST) / pHST) * .17 * srMR), border_color = color(na), bgcolor = srRZC),
                         box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
                         line.new(pp.x, pp.h, b.i, pp.h, color = srRLC, width = srMR <= .5 ? 2 : 3),
                         false, false, false, false, (pHST - pLST) / pHST))

                    lS.t := false
                else
                    lRt.bx.set_right(b.i)
                    lRt.ln.set_x2(b.i)

        else if lR.bx.get_top() != lS.bx.get_top()
            lR.bx.set_right(b.i)
            lR.ln.set_x2(b.i)
    else
        R.unshift(
          SnR.new(
             box.new(pp.x, pp.h, b.i, pp.h * (1 - ((pHST - pLST) / pHST) * .17 * srMR), border_color = color(na), bgcolor = srRZC),
             //box.new(pp.x, pp.h, b.i, pp.h * (1 - ((pHST - pLST) / pHST) * .17 * srMR), border_color = color(na), bgcolor = color.new(color.orange, 89)),
             box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
             line.new(pp.x, pp.h, b.i, pp.h, color = srRLC, width = srMR <= .5 ? 2 : 3),
             false, false, false, false, (pHST - pLST) / pHST))

        lS.t := false

    if swSH != 'None'
        StS = pp.x - pp.x1
        tradedVolume = f_getTradedVolume(StS, srLN)
        swH = pp.h > pp.h1 ? "Higher High" : pp.h < pp.h1 ? "Lower High" : na
        rTT = 'Swing High (' + swH + ') : ' + str.tostring(pp.h, format.mintick) + 
              (mss == -1 and pp.h < pp.h1 ? '\n    *Counter-Trend Move' : '') +
              '\n -Price Change : ↑ %' + str.tostring((pp.h - pp.l) * 100 / pp.l , '#.##') + 
              (nz(b.v) ? '\n -Traded Volume : ' + str.tostring(tradedVolume, format.volume)  + ' (' + str.tostring(StS - 1) + ' bars)' +
              '\n    *Average Volume/Bar : ' + str.tostring(tradedVolume / (StS - 1), format.volume) : '') 
        label.new(pp.x, pp.h, '◈', color = color(na), style = label.style_label_down, textcolor = swHC, size = f_getSize(swSH), tooltip = rTT)

        alert('New ' + swH + (mss == -1 and pp.h < pp.h1 ? ' (counter-trend move)' : '') + ' formed\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

if b.c[1] > pp.h and b.c > pp.h and not pp.hx 
    pp.hx := true
    mss := 1

pp_l  = ta.pivotlow (srLN, srLN)

if not na(pp_l) 
    pp.l1  := pp.l
    pp.l   := pp_l
    pp.x1  := pp.x
    pp.x   := b.i[srLN]
    pp.lx  := false

    if S.size() > 2 
        lS  := S.get(0)
        lSt := S.get(1)

        if pp.l < lS.bx.get_bottom() * (1 - lS.m * .17 * srMR) or pp.l > lS.bx.get_top() * (1 + lS.m * .17 * srMR)
            if pp.x < lS.bx.get_left() and pp.x + srLN > lS.bx.get_left() and b.c > lS.bx.get_top() //not lR.b
                na
            else
                if pp.l < lSt.bx.get_bottom() * (1 - lSt.m * .17 * srMR) or pp.l > lSt.bx.get_top() * (1 + lSt.m * .17 * srMR)

                    S.unshift(
                      SnR.new(
                         box.new(pp.x, pp.l * (1 + ((pHST - pLST) / pHST) * .17 * srMR), b.i, pp.l, border_color = color(na), bgcolor = srSZC),
                         box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
                         line.new(pp.x, pp.l, b.i, pp.l, color = srSLC, width = srMR <= .5 ? 2 : 3),
                         false, false, false, false, (pHST - pLST) / pHST))

                    lR.t := false
                else
                    lSt.bx.set_right(b.i)
                    lSt.ln.set_x2(b.i)

        else if lS.bx.get_bottom() != lR.bx.get_bottom()
            lS.bx.set_right(b.i)
            lS.ln.set_x2(b.i)
    else
        S.unshift(
          SnR.new(
             box.new(pp.x, pp.l * (1 + ((pHST - pLST) / pHST) * .17 * srMR), b.i, pp.l, border_color = color(na), bgcolor = srSZC),
             //box.new(pp.x, pp.l * (1 + ((pHST - pLST) / pHST) * .17 * srMR), b.i, pp.l, border_color = color(na), bgcolor = color.new(color.aqua, 89)),
             box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
             line.new(pp.x, pp.l, b.i, pp.l, color = srSLC, width = srMR <= .5 ? 2 : 3),
             false, false, false, false, (pHST - pLST) / pHST))

        lR.t := false

    if swSH != 'None'
        StS = pp.x - pp.x1
        tradedVolume = f_getTradedVolume(StS, srLN)
        swL = pp.l < pp.l1 ? "Lower Low" : pp.l > pp.l1 ? "Higher Low" : na
        sTT = 'Swing Low (' + swL + ') : ' + str.tostring(pp.l, format.mintick) + 
              (mss == 1 and pp.l > pp.l1 ? '\n    *Counter-Trend Move' : '') +
              '\n -Price Change : ↓ %' + str.tostring((pp.h - pp.l) * 100 / pp.h , '#.##') + 
              (nz(b.v) ? '\n -Traded Volume : ' + str.tostring(tradedVolume, format.volume)  + ' (' + str.tostring(StS - 1) + ' bars)' +
              '\n    *Average Volume/Bar : ' + str.tostring(tradedVolume / (StS - 1), format.volume) : '')
        label.new(pp.x, pp.l, '◈', color = color(na), style = label.style_label_up, textcolor = swLC, size = f_getSize(swSH), tooltip = sTT)

        alert('New ' + swL + (mss == 1 and pp.l > pp.l1 ? ' (counter-trend move)' : '') + ' formed\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

if b.c[1] < pp.l and b.c < pp.l and not pp.lx 
    pp.lx := true
    mss := -1

if R.size() > 0
    lR := R.get(0)

    if  srFBO and b.c[1] > lR.bx.get_top() * (1 + lR.m * .17) and not lR.b
        lR.bx.set_right(b.i[1])
        lR.ln.set_x2(b.i[1])
        lR.b := true
        lR.r := false

        label.new(b.i[1], b.l[1] * (1 - lR.m * .017), '▲\n\nB', color = srBUC, style = label.style_label_up , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bullish Breakout' + vST[1])
        //label.new(b.i[1], b.l[1] * (1 - lR.m * .017), '▲\n\nB', color = color.yellow, style = label.style_label_up , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bullish Breakout' + vST[1])

        S.unshift(
          SnR.new(
             box.new(b.i[1], lR.bx.get_top(), b.i + 1, lR.bx.get_bottom(), border_color = color(na), bgcolor = srSZC),
             box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
             line.new(b.i[1], lR.bx.get_bottom(), b.i + 1, lR.bx.get_bottom(), color = srSLC, width = srMR <= .5 ? 2 : 3),
             false, false, false, false, lR.m))
        //R.remove(0)

        if srBS != 'None'
            alert('Bullish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    else if b.c[1] > lR.bx.get_top() and not lR.b and not srFBO
        lR.bx.set_right(b.i[1])
        lR.ln.set_x2(b.i[1])
        lR.b := true
        lR.r := false

        label.new(b.i[1], b.l[1] * (1 - lR.m * .017), '▲\n\nB', color = srBUC, style = label.style_label_up , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bullish Breakout' + vST[1])

        S.unshift(
          SnR.new(
             box.new(b.i[1], lR.bx.get_top(), b.i + 1, lR.bx.get_bottom(), border_color = color(na), bgcolor = srSZC),
             box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
             line.new(b.i[1], lR.bx.get_bottom(), b.i + 1, lR.bx.get_bottom(), color = srSLC, width = srMR <= .5 ? 2 : 3),
             false, false, false, false, lR.m))
        //R.remove(0)

        if srBS != 'None'
            alert('Bullish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    else if lS.b and b.o[1] < lR.bx.get_top() and b.h[1] > lR.bx.get_bottom() and b.c[1] < lR.bx.get_bottom() and not lR.r and b.i[1] != lR.bx.get_left()
        label.new(b.i[1], b.h[1] * (1 + lR.m * .017), 'R', color = srRDC, style = label.style_label_down , textcolor = srRTC, size = f_getSize(srRS), tooltip = 'Re-test of Resistance Zone' + vST[1] )
        lR.r := true //
        lR.bx.set_right(b.i)
        lR.ln.set_x2(b.i)

        if srRS != 'None'
            alert('Re-test of resistance zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    else if b.h[1] > lR.bx.get_bottom() and b.c[1] < lR.bx.get_top() and b.c < lR.bx.get_top() and not lR.t and not lR.r and not lR.b and not lS.b and b.i[1] != lR.bx.get_left()
        label.new(b.i[1], b.h[1] * (1 + lR.m * .017), 'T', color = srTDC, style = label.style_label_down , textcolor = srTTC, size = f_getSize(srTS), tooltip = 'Test of Resistance Zone' + vST[1] )
        lR.t := true
        lR.bx.set_right(b.i)
        lR.ln.set_x2(b.i)

        if srTS != 'None'
            alert('Test of resistance zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period, alert.freq_once_per_bar_close)

    else if b.h > lR.bx.get_bottom() * (1 - lR.m * .17) and not lR.b //and lR.bx.get_top() != lS.bx.get_top()
        if b.h > lR.bx.get_bottom()
            lR.bx.set_right(b.i)
        lR.ln.set_x2(b.i)

    if isLLS[1] and isHV[1] and srPS != 'None'
        label.new(b.i[1], b.l[1] * (1 - lR.m * .017), '', color = srPUC, style = label.style_label_up , textcolor = color.white, size = f_getSize(srPS), tooltip = 'Rejection of Lower Prices' + vST[1])
        alert('Rejection of lower prices detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    if mnSH
        if b.h > lR.bx.get_top() and b.c <= lR.bx.get_top() * (1 + lR.m * .17 * mnMR) and not lR.l and b.i == lR.bx.get_right()
            if lR.lq.get_right() + srLN > b.i
                lR.lq.set_right(b.i + 1)
                lR.lq.set_top(math.min(math.max(b.h, lR.lq.get_top()), lR.bx.get_top() * (1 + lR.m * .17 * mnMR)))
            else
                lR.lq.set_lefttop(b.i[1], math.min(b.h, lR.bx.get_top() * (1 + lR.m * .17 * mnMR)))
                lR.lq.set_rightbottom(b.i + 1, lR.bx.get_top())
                lR.lq.set_bgcolor(mnRZC)

            lR.l := true

        else if b.h > lR.bx.get_top() and b.c <= lR.bx.get_top() * (1 + lR.m * .17 * mnMR) and lR.l and b.i == lR.bx.get_right()
            lR.lq.set_right(b.i + 1)
            lR.lq.set_top(math.min(math.max(b.h,lR.lq.get_top()), lR.bx.get_top() * (1 + lR.m * .17 * mnMR)))
        else if lR.l and (b.c >= lR.bx.get_top() * (1 + lR.m * .17 * mnMR) or b.c < lR.bx.get_bottom())
            lR.l := false

if R.size() > 1 and srHST //and (lR.b or lS.b)// and lR.bx.get_top() != lS.bx.get_top()
    lRt := R.get(1)

    if lR.bx.get_top() != lRt.bx.get_top()

        if  srFBO and b.c[1] > lRt.bx.get_top() * (1 + lRt.m * .17) and not lRt.b
            lRt.bx.set_right(b.i[1])
            lRt.ln.set_x2(b.i[1])
            lRt.b := true
            lRt.r := false

            label.new(b.i[1], b.l[1] * (1 - lRt.m * .017), '▲\n\nB', color = srBUC, style = label.style_label_up , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bullish Breakout' + vST[1])

            S.unshift(
              SnR.new(
                 box.new(b.i[1], lRt.bx.get_top(), b.i + 1, lRt.bx.get_bottom(), border_color = color(na), bgcolor = srSZC),
                 box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
                 line.new(b.i[1], lRt.bx.get_bottom(), b.i + 1, lRt.bx.get_bottom(), color = srSLC, width = srMR <= .5 ? 2 : 3),
                 false, false, false, false, lRt.m))
            //R.remove(1)

            if srBS != 'None'
                alert('Bullish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

        else if b.c[1] > lRt.bx.get_top() and not lRt.b and not srFBO
            lRt.bx.set_right(b.i[1])
            lRt.ln.set_x2(b.i[1])
            lRt.b := true
            lRt.r := false

            label.new(b.i[1], b.l[1] * (1 - lRt.m * .017), '▲\n\nB', color = srBUC, style = label.style_label_up , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bullish Breakout' + vST[1])

            S.unshift(
              SnR.new(
                 box.new(b.i[1], lRt.bx.get_top(), b.i + 1, lRt.bx.get_bottom(), border_color = color(na), bgcolor = srSZC),
                 box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
                 line.new(b.i[1], lRt.bx.get_bottom(), b.i + 1, lRt.bx.get_bottom(), color = srSLC, width = srMR <= .5 ? 2 : 3),
                 false, false, false, false, lRt.m))
            //R.remove(1)

            if srBS != 'None'
                alert('Bullish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

        else if lSt.b and b.o[1] < lRt.bx.get_top() and b.h[1] > lRt.bx.get_bottom() and b.c[1] < lRt.bx.get_bottom() and not lRt.r and b.i[1] != lRt.bx.get_left()
            label.new(b.i[1], b.h[1] * (1 + lRt.m * .017), 'R', color = srRDC, style = label.style_label_down , textcolor = srRTC, size = f_getSize(srRS), tooltip = 'Re-test of Resistance Zone' + vST[1] )
            lRt.r := true //
            lRt.bx.set_right(b.i)
            lRt.ln.set_x2(b.i)

            if srRS != 'None'
                alert('Re-test of resistance zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

        else if b.h[1] > lRt.bx.get_bottom() and b.c[1] < lRt.bx.get_top() and b.c < lRt.bx.get_top() and not lRt.t and not lRt.b and not lSt.b and b.i[1] != lRt.bx.get_left()
            label.new(b.i[1], b.h[1] * (1 + lRt.m * .017), 'T', color = srTDC, style = label.style_label_down , textcolor = srTTC, size = f_getSize(srTS), tooltip = 'Test of Resistance Zone' + vST[1] )
            lRt.t := true
            lRt.bx.set_right(b.i)
            lRt.ln.set_x2(b.i)

            if srTS != 'None'
                alert('Test of resistance zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period, alert.freq_once_per_bar_close)

        else if b.h > lRt.bx.get_bottom() * (1 - lRt.m * .17) and not lRt.b
            if b.h > lRt.bx.get_bottom()
                lRt.bx.set_right(b.i)
            lRt.ln.set_x2(b.i)

        if mnSH
            if b.h > lRt.bx.get_top() and b.c <= lRt.bx.get_top() * (1 + lRt.m * .17 * mnMR) and not lRt.l and b.i == lRt.bx.get_right()
                if lRt.lq.get_right() + srLN > b.i
                    lRt.lq.set_right(b.i + 1)
                    lRt.lq.set_top(math.min(math.max(b.h, lRt.lq.get_top()), lRt.bx.get_top() * (1 + lRt.m * .17 * mnMR)))
                else
                    lRt.lq.set_lefttop(b.i[1], math.min(b.h, lRt.bx.get_top() * (1 + lRt.m * .17 * mnMR)))
                    lRt.lq.set_rightbottom(b.i + 1, lRt.bx.get_top())
                    lRt.lq.set_bgcolor(mnRZC)
    
                lRt.l := true
    
            else if b.h > lRt.bx.get_top() and b.c <= lRt.bx.get_top() * (1 + lRt.m * .17 * mnMR) and lRt.l and b.i == lRt.bx.get_right()
                lRt.lq.set_right(b.i + 1)
                lRt.lq.set_top(math.min(math.max(b.h, lRt.lq.get_top()), lRt.bx.get_top() * (1 + lRt.m * .17 * mnMR)))
            else if lRt.l and (b.c >= lRt.bx.get_top() * (1 + lRt.m * .17 * mnMR) or b.c < lRt.bx.get_bottom())
                lRt.l := false

if S.size() > 1
    lS := S.get(0)

    if  srFBO and b.c[1] < lS.bx.get_bottom() * (1 - lS.m * .17) and not lS.b
        lS.bx.set_right(b.i[1])
        lS.ln.set_x2(b.i[1])
        lS.b := true
        lS.r := false

        label.new(b.i[1], b.h[1] * (1 + lS.m * .017), 'B\n\n▼', color = srBDC, style = label.style_label_down , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bearish Breakout' + vST[1] )
        //label.new(b.i[1], b.h[1] * (1 + lS.m * .017), 'B\n\n▼', color = color.yellow, style = label.style_label_down , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bearish Breakout' + vST[1] )

        R.unshift(
          SnR.new(
             box.new(b.i[1], lS.bx.get_top(), b.i + 1, lS.bx.get_bottom(), border_color = color(na), bgcolor = srRZC),
             box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
             line.new(b.i[1], lS.bx.get_top(), b.i + 1, lS.bx.get_top(), color = srRLC, width = srMR <= .5 ? 2 : 3),
             false, false, false, false, lS.m))
        //S.remove(0)

        if srBS != 'None'
            alert('Bearish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    if  b.c[1] < lS.bx.get_bottom() and not lS.b and not srFBO
        lS.bx.set_right(b.i[1])
        lS.ln.set_x2(b.i[1])
        lS.b := true
        lS.r := false

        label.new(b.i[1], b.h[1] * (1 + lS.m * .017), 'B\n\n▼', color = srBDC, style = label.style_label_down , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bearish Breakout' + vST[1] )

        R.unshift(
          SnR.new(
             box.new(b.i[1], lS.bx.get_top(), b.i + 1, lS.bx.get_bottom(), border_color = color(na), bgcolor = srRZC),
             box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
             line.new(b.i[1], lS.bx.get_top(), b.i + 1, lS.bx.get_top(), color = srRLC, width = srMR <= .5 ? 2 : 3),
             false, false, false, false, lS.m))
        //S.remove(0)

        if srBS != 'None'
            alert('Bearish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    else if lR.b and b.o[1] > lS.bx.get_bottom() and b.l[1] < lS.bx.get_top() and b.c[1] > lS.bx.get_top() and not lS.r and b.i[1] != lS.bx.get_left()
        label.new(b.i[1], b.l[1] * (1 - lS.m * .017), 'R', color = srRUC, style = label.style_label_up , textcolor = srRTC, size = f_getSize(srRS), tooltip = 'Re-test of Support Zone' + vST[1] )
        lS.r := true //
        lS.bx.set_right(b.i)
        lS.ln.set_x2(b.i)

        if srRS != 'None'
            alert('Re-test of support zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    else if b.l[1] < lS.bx.get_top() and b.c[1] > lS.bx.get_bottom() and b.c > lS.bx.get_bottom() and not lS.t and not lS.b and not lR.b and b.i[1] != lS.bx.get_left()
        label.new(b.i[1], b.l[1] * (1 - lS.m * .017), 'T', color = srTUC, style = label.style_label_up , textcolor = srTTC, size = f_getSize(srTS), tooltip = 'Test of Support Zone' + vST[1] )
        lS.t := true
        lS.bx.set_right(b.i)
        lS.ln.set_x2(b.i)

        if srTS != 'None'
            alert('Test of support zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period, alert.freq_once_per_bar_close)

    else if b.l < lS.bx.get_top() * (1 + lS.m * .17) and not lS.b //and lS.bx.get_bottom() != lR.bx.get_bottom()
        if b.l < lS.bx.get_top()
            lS.bx.set_right(b.i)
        lS.ln.set_x2(b.i)

    if isLUS[1] and isHV[1] and srPS != 'None'
        label.new(b.i[1], b.h[1] * (1 + lS.m * .017), '', color = srPDC, style = label.style_label_down , textcolor = color.white, size = f_getSize(srPS), tooltip = 'Rejection of Higher Prices' + vST[1] )
        alert('Rejection of higher prices detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

    if mnSH
        if b.l < lS.bx.get_bottom() and b.c >= lS.bx.get_bottom() * (1 - lS.m * .17 * mnMR) and not lS.l and b.i == lS.bx.get_right()
            if lS.lq.get_right() + srLN > b.i
                lS.lq.set_right(b.i + 1)
                lS.lq.set_bottom(math.max(math.min(b.l, lS.lq.get_bottom()), lS.bx.get_bottom() * (1 - lS.m * .17 * mnMR)))
            else
                lS.lq.set_lefttop(b.i[1], lS.bx.get_bottom())
                lS.lq.set_rightbottom(b.i + 1, math.max(b.l, lS.bx.get_bottom() * (1 - lS.m * .17 * mnMR)))
                lS.lq.set_bgcolor(mnSZC)

            lS.l := true

        else if b.l < lS.bx.get_bottom() and b.c >= lS.bx.get_bottom() * (1 - lS.m * .17 * mnMR) and lS.l and b.i == lS.bx.get_right()
            lS.lq.set_right(b.i + 1)
            lS.lq.set_bottom(math.max(math.min(b.l, lS.lq.get_bottom()), lS.bx.get_bottom() * (1 - lS.m * .17 * mnMR)))
        else if lS.l and (b.c <= lS.bx.get_bottom() * (1 - lS.m * .17 * mnMR) or b.c > lS.bx.get_top())
            lS.l := false

if S.size() > 2 and srHST //and (lR.b or lS.b)// and lS.bx.get_bottom() != lR.bx.get_bottom() 
    lSt := S.get(1)

    if lS.bx.get_bottom() != lSt.bx.get_bottom()

        if  srFBO and b.c[1] < lSt.bx.get_bottom() * (1 - lSt.m * .17) and not lSt.b //and b.i[1] != lR.bx.get_left()
            lSt.bx.set_right(b.i[1])
            lSt.ln.set_x2(b.i[1])
            lSt.b := true
            lSt.r := false

            label.new(b.i[1], b.h[1] * (1 + lSt.m * .017), 'B\n\n▼', color = srBDC, style = label.style_label_down , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bearish Breakout' + vST[1] )

            R.unshift(
              SnR.new(
                 box.new(b.i[1], lSt.bx.get_top(), b.i + 1, lSt.bx.get_bottom(), border_color = color(na), bgcolor = srRZC),
                 box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
                 line.new(b.i[1], lSt.bx.get_top(), b.i + 1, lSt.bx.get_top(), color = srRLC, width = srMR <= .5 ? 2 : 3),
                 false, false, false, false, lSt.m))
            //S.remove(1)

            if srBS != 'None'
                alert('Bearish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

        else if b.c[1] < lSt.bx.get_bottom() and not lSt.b and not srFBO //and b.i[1] != lR.bx.get_left()
            lSt.bx.set_right(b.i[1])
            lSt.ln.set_x2(b.i[1])
            lSt.b := true
            lSt.r := false

            label.new(b.i[1], b.h[1] * (1 + lSt.m * .017), 'B\n\n▼', color = srBDC, style = label.style_label_down , textcolor = srBTC, size = f_getSize(srBS), tooltip = 'Bearish Breakout' + vST[1] )

            R.unshift(
              SnR.new(
                 box.new(b.i[1], lSt.bx.get_top(), b.i + 1, lSt.bx.get_bottom(), border_color = color(na), bgcolor = srRZC),
                 box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
                 line.new(b.i[1], lSt.bx.get_top(), b.i + 1, lSt.bx.get_top(), color = srRLC, width = srMR <= .5 ? 2 : 3),
                 false, false, false, false, lSt.m))
            //S.remove(1)

            if srBS != 'None'
                alert('Bearish breakout detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

        else if lRt.b and b.o[1] > lSt.bx.get_bottom() and b.l[1] < lSt.bx.get_top() and b.c[1] > lSt.bx.get_top() and not lSt.r and b.i[1] != lSt.bx.get_left() //and lSt.bx.get_top() != lS.bx.get_top() //DGT
            label.new(b.i[1], b.l[1] * (1 - lSt.m * .017), 'R', color = srRUC, style = label.style_label_up , textcolor = srRTC, size = f_getSize(srRS), tooltip = 'Re-test of Support Zone' + vST[1] )
            lSt.r := true
            lSt.bx.set_right(b.i)
            lSt.ln.set_x2(b.i)

            if srRS != 'None'
                alert('Re-test of support zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period)

        else if b.l[1] < lSt.bx.get_top() and b.c[1] > lSt.bx.get_bottom() and b.c > lSt.bx.get_bottom() and not lSt.t and not lSt.b and not lRt.b and b.i[1] != lSt.bx.get_left()
            label.new(b.i[1], b.l[1] * (1 - lSt.m * .017), 'T', color = srTUC, style = label.style_label_up , textcolor = srTTC, size = f_getSize(srTS), tooltip = 'Test of Support Zone' + vST[1] )
            lSt.t := true
            lSt.bx.set_right(b.i)
            lSt.ln.set_x2(b.i)

            if srTS != 'None'
                alert('Test of support zone detected\n' + syminfo.ticker + ' price (' + str.tostring(b.c, format.mintick) + '), timeframe ' + timeframe.period, alert.freq_once_per_bar_close)

        else if b.l < lSt.bx.get_top() * (1 + lSt.m * .17) and not lSt.b
            if b.l < lSt.bx.get_top()
                lSt.bx.set_right(b.i)
            lSt.ln.set_x2(b.i)

        if mnSH
            if b.l < lSt.bx.get_bottom() and b.c >= lSt.bx.get_bottom() * (1 - lSt.m * .17 * mnMR) and not lSt.l and b.i == lSt.bx.get_right()
                if lSt.lq.get_right() + srLN > b.i
                    lSt.lq.set_right(b.i + 1)
                    lSt.lq.set_bottom(math.max(math.min(b.l, lSt.lq.get_bottom()), lSt.bx.get_bottom() * (1 - lSt.m * .17 * mnMR)))
                else
                    lSt.lq.set_lefttop(b.i[1], lSt.bx.get_bottom())
                    lSt.lq.set_rightbottom(b.i + 1, math.max(b.l, lSt.bx.get_bottom() * (1 - lSt.m * .17 * mnMR)))
                    lSt.lq.set_bgcolor(mnSZC)

                lSt.l := true

            else if b.l < lSt.bx.get_bottom() and b.c >= lSt.bx.get_bottom() * (1 - lSt.m * .17 * mnMR) and lSt.l and b.i == lSt.bx.get_right()
                lSt.lq.set_right(b.i + 1)
                lSt.lq.set_bottom(math.max(math.min(b.l, lSt.lq.get_bottom()), lSt.bx.get_bottom() * (1 - lSt.m * .17 * mnMR)))
            else if lSt.l and (b.c <= lSt.bx.get_bottom() * (1 - lS.m * .17 * mnMR) or b.c > lSt.bx.get_top())
                lSt.l := false

//-----------------------------------------------------------------------------}


// ------------ ICHIMOKU -----------------------------------------------------

conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
plot(conversionLine, color=#2962FF, title="Conversion Line", display = display.none)
plot(baseLine, color=#B71C1C, title="Base Line")
plot(close, offset = -displacement + 1, color=#43A047, title="Lagging Span", display = display.none)
p1 = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
	 title="Leading Span A",  display = display.none)
p2 = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
	 title="Leading Span B",  display = display.none)
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none) 
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none) 
fill(p1, p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90), title = "Ichimoku cloud")


// // ------------- Candle stick ---------------------------------------
// //------------------------------------------------------------------------------
// //Settings
// //-----------------------------------------------------------------------------{
// length = input.int(14, 'Trend Length'
//   , minval = 0)

// alpha = input.float(50, 'Convergence'
//   , minval = 0
//   , maxval = 100)

// smooth = input.int(7, 'Smooth'
//   , minval = 1)

// //Patterns
// enable_hammer = input(true, 'Hammer'
//   , group = 'patterns')

// enable_ihammer = input(true, 'Inverted Hammer'
//   , group = 'patterns')

// enable_shooting = input(true, 'Shooting Star'
//   , group = 'patterns')

// enable_hanging = input(true, 'Hanging Man'
//   , group = 'patterns')

// enable_bulleng = input(false, 'Bullish Engulfing'
//   , group = 'patterns')

// enable_beareng = input(false, 'Bearish Engulfing'
//   , group = 'patterns')

// enable_wm = input(true, 'White Marubozu'
//   , group = 'patterns')

// enable_bm = input(true, 'Black Marubozu'
//   , group = 'patterns')
  
// //Style
// bull_css = input(#0cb51a, 'Bullish Color'
//   , group = 'Style')

// avg_css = input(#ff5d00, 'Average Color'
//   , group = 'Style')

// bear_css = input(#ff1100, 'Bearish Color'
//   , group = 'Style')

// fade = input.int(200, 'Fading Period'
//   , minval = 1)

// //-----------------------------------------------------------------------------}
// //Variables/Functions
// //-----------------------------------------------------------------------------{
// bIndex = bar_index
// o = open,h = high,l = low,c = close

// atrange = ta.atr(20) / 2 
// st = ta.stoch(c, c, c, length)
// downtrend = st < 50
// uptrend = st > 50

// d = math.abs(c - o)

// //Label
// lbl(y, txt, direction, tlt)=>
//     label.new(bIndex, y, txt
//           , size = size.tiny
//           , style = direction == 1 ? label.style_label_up : label.style_label_down
//           , color = direction == 1 ? bull_css : bear_css
//           , textcolor = color.white
//           , tooltip = tlt)

// //-----------------------------------------------------------------------------}
// //Tooltips
// //-----------------------------------------------------------------------------{
// var hammer_tlt = "The hammer candlestick pattern is formed of a short body with a long lower wick, and is found at the bottom of a downward trend."
//   + "\n" + "\nA hammer shows that although there were selling pressures during the day, ultimately a strong buying pressure drove the price back up." 

// var ihammer_tlt = "The inverted hammer is a similar pattern than the hammer pattern. The only difference being that the upper wick is long, while the lower wick is short."
//   + "\n" + "\nIt indicates a buying pressure, followed by a selling pressure that was not strong enough to drive the market price down. The inverse hammer suggests that buyers will soon have control of the market."

// var bulleng_tlt = "The bullish engulfing pattern is formed of two candlesticks. The first candle is a short red body that is completely engulfed by a larger green candle"
//   + "\n" + "\nThough the second day opens lower than the first, the bullish market pushes the price up, culminating in an obvious win for buyers"

// var wm_tlt = "The white marubozu is a single candles formation formed after a downtrend and indicating a bullish reversal."
//   + "\n" + "\nThis candlestick has a long bullish body with no upper or lower shadows, reflecting a strong buying pressure."
  
// var shooting_tlt = "The shooting star is the same shape as the inverted hammer, but is formed in an uptrend: it has a small lower body, and a long upper wick."
//   + "\n" + "\nUsually, the market will gap slightly higher on opening and rally to an intra-day high before closing at a price just above the open – like a star falling to the ground."

// var hanging_tlt = "The hanging man is the bearish equivalent of a hammer; it has the same shape but forms at the end of an uptrend."
//   + "\n" + "\nIt indicates that there was a significant sell-off during the day, but that buyers were able to push the price up again. The large sell-off is often seen as an indication that the bulls are losing control of the market."

// var beareng_tlt = "A bearish engulfing pattern occurs at the end of an uptrend. The first candle has a small green body that is engulfed by a subsequent long red candle."
//   + "\n" + "\nIt signifies a peak or slowdown of price movement, and is a sign of an impending market downturn. The lower the second candle goes, the more significant the trend is likely to be."

// var bm_tlt = "The black marubozu is a single candles formation formed after an uptrend and indicating a bearish reversal."
//   + "\n" + "\nThis candlestick has a long bearish body with no upper or lower shadows, reflecting a strong selling pressure."

// //-----------------------------------------------------------------------------}
// //Pattern Rules
// //-----------------------------------------------------------------------------{
// hammer = downtrend and math.min(o, c) - l > 2 * d and h - math.max(c, o) < d / 4
// ihammer = downtrend and h - math.max(o, c) > 2 * d and math.min(c, o) - l < d / 4

// shooting = uptrend and h - math.max(o, c) > 2 * d and math.min(c, o) - l < d / 4
// hanging = uptrend and math.min(o, c) - l > 2 * d and h - math.max(c, o) < d / 4

// bulleng = downtrend and c > o and c[1] < o[1] and c > o[1] and d > atrange
// beareng = uptrend and c < o and c[1] > o[1] and c < o[1] and d > atrange

// wm = c > o and h - math.max(o, c) + math.min(o, c) - l < d / 10 and d > atrange and downtrend[1]
// bm = c < o and h - math.max(o, c) + math.min(o, c) - l < d / 10 and d > atrange and uptrend[1]

// //-----------------------------------------------------------------------------}
// //Channel
// //-----------------------------------------------------------------------------{
// var maxH = h
// var minL = l

// //Bullish Patterns
// if hammer and enable_hammer
//     maxH += alpha / 100 * (c - maxH)
//     lbl(low, 'H', 1, hammer_tlt)
    
// if ihammer and enable_ihammer
//     maxH += alpha / 100 * (c - maxH)
//     lbl(low, 'IH', 1, ihammer_tlt)

// if bulleng and enable_bulleng
//     maxH += alpha / 100 * (c - maxH)
//     lbl(low, 'BE', 1, bulleng_tlt)

// if wm and enable_wm
//     maxH += alpha / 100 * (c - maxH)
//     lbl(low, 'WM', 1, wm_tlt)

// //Bearish Patterns
// if shooting and enable_shooting
//     minL += alpha / 100 * (c - minL)
//     lbl(high, 'SS', 0, shooting_tlt)

// if hanging and enable_hanging
//     minL += alpha / 100 * (c - minL)
//     lbl(high, 'HM', 0, hanging_tlt)

// if beareng and enable_beareng
//     minL += alpha / 100 * (c - minL)
//     lbl(high, 'BE', 0, beareng_tlt)

// if bm and enable_bm
//     minL += alpha / 100 * (c - minL)
//     lbl(high, 'BM', 0, bm_tlt)

// maxH := math.max(c, maxH)
// minL := math.min(c, minL)

// smooth_max = ta.ema(maxH, smooth)
// smooth_min = ta.ema(minL, smooth)
// avg = math.avg(smooth_max, smooth_min)

// //-----------------------------------------------------------------------------}
// //Plots
// //-----------------------------------------------------------------------------{
// var oss = 0
// oss := c > smooth_max ? 1 : c < smooth_min ? 0 : oss

// var fade_max = 0
// fade_max := oss == 0 ? fade_max + 1 : 0

// var fade_min = 0
// fade_min := oss == 1 ? fade_min + 1 : 0

// plot_0 = plot(smooth_max, 'Upper', bull_css, display = display.none)

// plot_1 = plot(avg, 'Average', avg_css, display = display.none)

// plot_2 = plot(smooth_min, 'Lower', bear_css, display = display.none)

// css1 = color.from_gradient(fade_max, 0, fade, color.new(bull_css, 80), color.new(bull_css, 100))
// // fill(plot_0, plot_1, css1)

// css2 = color.from_gradient(fade_min, 0, fade, color.new(bear_css, 80), color.new(bear_css, 100))
// // fill(plot_1, plot_2, css2)

// //-----------------------------------------------------------------------------}